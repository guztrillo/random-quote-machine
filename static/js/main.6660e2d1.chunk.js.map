{"version":3,"sources":["components/QuoteAndAuthor.js","App.js","reportWebVitals.js","index.js"],"names":["QuoteAndAuthor","props","quote","generateRandomQuote","color","id","className","author","href","target","rel","onClick","window","open","encodeURIComponent","App","state","data","bind","this","createRGB","fades","fetch","then","response","json","setState","text","index","Math","floor","random","newQuote","bgColor","bg","document","querySelectorAll","setAttribute","body","style","backgroundColor","transition","opacity","getElementById","quoteRight","querySelector","quoteLeft","show","setOpacity","elem","Number","getComputedStyle","getPropertyValue","clearInterval","onload","setInterval","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6660e2d1.chunk.js","sourcesContent":["import React, {Fragment} from 'react';\r\n\r\nexport default function QuoteAndAuthor (props) {\r\n     const {quote, generateRandomQuote, color} = props;\r\n     return (\r\n          <Fragment>\r\n               <div id=\"fades\">\r\n                    <div id=\"text\">\r\n                         <i className=\"fas fa-quote-left randomTxtColor icon\"></i>\r\n                         <p id=\"quoteText\" className=\"randomTxtColor\">{quote.quote}</p>\r\n                         <i className=\"fas fa-quote-right randomTxtColor icon\"></i>\r\n                    </div>\r\n                    <div id=\"author\">\r\n                         <span id=\"quoteAuthor\" className=\"randomTxtColor\">{quote.author === null ? '- Unknown' : '- ' + quote.author}</span>\r\n                    </div>\r\n               </div>\r\n               <div id=\"buttons\">\r\n                    <a id=\"tweet-quote\" className=\"twitter-share-button\" href=\"https://wwww.twitter.com/intent/tweet\" target=\"_blank\" rel=\"noreferrer\" onClick={() => {\r\n                         generateRandomQuote(quote);\r\n                         window.open('https://twitter.com/intent/tweet/?text=' + encodeURIComponent('\"' + quote.quote + '\"' + '--' + quote.author))\r\n                    }}>\r\n                         <i className=\"fab fa-twitter randomTxtColor\"></i>\r\n                    </a>\r\n                    <button id=\"new-quote\" className=\"randomBgColor\" onClick={()=> {\r\n                         generateRandomQuote(quote);\r\n                         color();\r\n                    }}>New Quote</button>\r\n               </div>\r\n          </Fragment>\r\n     )\r\n}","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport QuoteAndAuthor from './components/QuoteAndAuthor';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      quote: '',\n      author: '',\n      data: {}\n    }\n    this.generateRandomQuote = this.generateRandomQuote.bind(this);\n  }\n  componentDidMount() {\n    this.createRGB();\n    this.fades();\n    fetch('https://type.fit/api/quotes')\n      .then(response => response.json())\n      .then(data => this.setState({ quote: data[0].text, author: data[0].author, data }));\n  }\n  generateRandomQuote(state) {\n    this.fades();\n    let index = Math.floor(Math.random() * 1643)\n    let newQuote = state.data[index]\n    this.setState({\n      quote: newQuote.text,\n      author: newQuote.author\n    })\n  }\n  createRGB() {\n    let bgColor = \"rgb(\" + Math.floor(Math.random() * 255) + \",\" + Math.floor(Math.random() * 255) + \",\" + Math.floor(Math.random() * 255) + \")\";\n    const bg = document.querySelectorAll('.randomBgColor');\n    for (let bgs of bg) {\n      bgs.setAttribute('style', `background-color: ${bgColor}`)\n    }\n    const text = document.querySelectorAll('.randomTxtColor');\n    for (let texts of text) {\n      texts.setAttribute('style', `color: ${bgColor}`)\n    }\n    document.body.style.backgroundColor = bgColor;\n    document.body.style.transition = \"background-color 1s ease\"\n  }\n  fades() {\n    var opacity = 0;\n    var intervalID = 0;\n    var text = document.getElementById(\"quoteText\");\n    var quoteRight = document.querySelector('.fa-quote-right');\n    var quoteLeft = document.querySelector('.fa-quote-left');\n    var author = document.getElementById(\"quoteAuthor\");\n    window.onload = fadeIn;\n\n    function fadeIn() {\n      setInterval(show, 50);\n    }\n\n    function show() {\n      setOpacity(text)\n      setOpacity(author)\n      setOpacity(quoteRight)\n      setOpacity(quoteLeft)\n      function setOpacity(elem) {\n        opacity = Number(window.getComputedStyle(elem)\n          .getPropertyValue(\"opacity\"));\n        if (opacity < 1) {\n          opacity = opacity + 0.075;\n          elem.style.opacity = opacity\n        } else {\n          clearInterval(intervalID);\n        }\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div id=\"title\">\n          <h1>Random Quote</h1>\n        </div>\n        <div className=\"container-fluid randomBgColor\">\n          <div id=\"quote-box\">\n            <QuoteAndAuthor generateRandomQuote={this.generateRandomQuote} quote={this.state} color={this.createRGB} />\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}